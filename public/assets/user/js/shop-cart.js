// Khi DOM ƒë√£ ƒë∆∞·ª£c t·∫£i ƒë·∫ßy ƒë·ªß
document.addEventListener('DOMContentLoaded', () => {
    // üîë Key d√πng ƒë·ªÉ l∆∞u ID s·∫£n ph·∫©m ƒë√£ ch·ªçn trong localStorage
    const CHECKED_KEY = 'selected_cart_ids';

    // üì¶ Ki·ªÉm tra URL c√≥ tham s·ªë voucher_applied kh√¥ng
    const urlParams = new URLSearchParams(location.search);
    const isVoucherJustApplied = urlParams.has('voucher_applied');

    // üß± L·∫•y c√°c ph·∫ßn t·ª≠ c·∫ßn thi·∫øt trong DOM
    const checkboxes = document.querySelectorAll('.item-checkbox');
    const checkAll = document.getElementById('check-all');
    const formCheckout = document.getElementById('cart-actions-form');
    const formRemove = document.getElementById('remove-selected-form');
    const voucherForm = document.getElementById('voucher-form');

    // üßπ N·∫øu kh√¥ng ph·∫£i apply voucher, th√¨ xo√° checked_ids kh·ªèi localStorage
    if (!isVoucherJustApplied) localStorage.removeItem(CHECKED_KEY);
    // ‚úÖ N·∫øu c√≥, th√¨ x√≥a tham s·ªë kh·ªèi URL sau khi x·ª≠ l√Ω
    if (isVoucherJustApplied) {
        const url = new URL(location.href);
        url.searchParams.delete('voucher_applied');
        history.replaceState({}, '', url.toString());
    }

    // üìã L·∫•y headers cho fetch request (bao g·ªìm CSRF token)
    function getHeaders() {
        return {
            'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').content,
            'Accept': 'application/json',
            'Content-Type': 'application/json'
        };
    }

    // üíæ L∆∞u danh s√°ch ID s·∫£n ph·∫©m ƒë∆∞·ª£c ch·ªçn v√†o localStorage
    function saveChecked(ids) {
        localStorage.setItem(CHECKED_KEY, JSON.stringify(ids));
    }

    // üì§ L·∫•y danh s√°ch ID s·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c ch·ªçn t·ª´ localStorage
    function loadChecked() {
        try {
            return JSON.parse(localStorage.getItem(CHECKED_KEY)) || [];
        } catch {
            return [];
        }
    }

    // üîÅ C·∫≠p nh·∫≠t danh s√°ch ID ƒë∆∞·ª£c ch·ªçn (checkbox), hi·ªÉn th·ªã t·ªïng ti·ªÅn v√† t√≠nh l·∫°i voucher
    function updateSelectedIds() {
        const selectedIds = [...checkboxes].filter(cb => cb.checked).map(cb => cb.value);
        
        // C·∫≠p nh·∫≠t t·∫•t c·∫£ input hidden trong form
        document.querySelectorAll('input[name="selected_ids"]').forEach(input => {
            input.value = selectedIds.join(',');
        });

        // C·∫≠p nh·∫≠t form xo√°
        const hiddenInputRemove = document.getElementById('selected-ids-remove');
        if (hiddenInputRemove) {
            hiddenInputRemove.value = selectedIds.join(',');
        }

        saveChecked(selectedIds);
        updateCartSummary(selectedIds);
        updateVoucher(selectedIds);
    }

    // üí∞ T√≠nh l·∫°i t·ªïng ti·ªÅn v√† c·∫≠p nh·∫≠t giao di·ªán gi·ªè h√†ng
    function updateCartSummary(selectedIds) {
        let total = 0;

        // T√≠nh t·ªïng ti·ªÅn c·ªßa c√°c s·∫£n ph·∫©m ƒë∆∞·ª£c ch·ªçn
        selectedIds.forEach(id => {
            const row = [...checkboxes].find(cb => cb.value === id)?.closest('tr');
            if (!row) return;
            const text = row.querySelector('.item-total')?.textContent || '0';
            total += parseInt(text.replace(/[^\d]/g, '')) || 0;
        });

        const discountEl = document.getElementById('discount-value');
        const discount = parseInt(discountEl?.dataset.discount || 0);
        const final = total - discount;

        // Hi·ªÉn th·ªã t·ªïng t·∫°m t√≠nh v√† t·ªïng cu·ªëi c√πng
        document.getElementById('temp-value').textContent = total.toLocaleString('vi-VN') + ' VNƒê';
        document.getElementById('total-value').textContent = final.toLocaleString('vi-VN') + ' VNƒê';

        // N·∫øu kh√¥ng c√≤n s·∫£n ph·∫©m ƒë∆∞·ª£c ch·ªçn m√† c√≥ √°p d·ª•ng m√£ gi·∫£m, th√¨ hu·ª∑ m√£ gi·∫£m
        if (selectedIds.length === 0 && document.querySelector('[data-has-voucher="true"]')) {
            fetch('/cart/remove-voucher', {
                method: 'POST',
                headers: getHeaders()
            }).then(() => {
                localStorage.removeItem(CHECKED_KEY);
                document.getElementById('discount-display').textContent = '-0';
                if (discountEl) discountEl.dataset.discount = '0';
                document.querySelector('[data-has-voucher="true"]')?.parentElement?.remove();
                document.getElementById('total-value').textContent = document.getElementById('temp-value').textContent;
            });
        }
    }

    // üîÑ C·∫≠p nh·∫≠t l·∫°i gi√° tr·ªã gi·∫£m t·ª´ voucher d·ª±a theo c√°c item ƒëang ch·ªçn
    function updateVoucher(selectedIds) {
        if (!document.querySelector('[data-has-voucher="true"]')) return;

        const items = selectedIds.map(id => {
            const row = [...checkboxes].find(cb => cb.value === id)?.closest('tr');
            const qty = row?.querySelector('.quantity-input')?.value || 1;
            return { id, quantity: parseInt(qty) };
        });

        fetch('/cart/update-voucher', {
            method: 'POST',
            headers: getHeaders(),
            body: JSON.stringify({ items })
        })
        .then(res => res.json())
        .then(data => {
            if (data.success) {
                document.getElementById('discount-display').textContent = `-${data.discount_value}`;
                document.getElementById('total-value').textContent = parseInt(data.final_total).toLocaleString('vi-VN') + ' VNƒê';
                const discountEl = document.getElementById('discount-value');
                if (discountEl) discountEl.dataset.discount = data.discount_raw || 0;
            }
        });
    }

    // ‚ö†Ô∏è Hi·ªÉn th·ªã h·ªôp l·ªói t·∫°m th·ªùi
    function showError(msg) {
        const box = document.getElementById('cart-error-box');
        if (!box) return;
        box.querySelector('.cart-error-message').textContent = msg;
        box.classList.remove('hidden');
        setTimeout(() => box.classList.add('hidden'), 4000);
    }

    // üì¶ G√°n s·ª± ki·ªán khi tick ch·ªçn s·∫£n ph·∫©m
    checkboxes.forEach(cb => {
        cb.addEventListener('change', () => {
            updateSelectedIds();
            if (checkAll) checkAll.checked = [...checkboxes].every(cb => cb.checked);
        });
    });

    // ‚úÖ Tick/untick t·∫•t c·∫£ s·∫£n ph·∫©m
    if (checkAll) {
        checkAll.addEventListener('change', () => {
            checkboxes.forEach(cb => cb.checked = checkAll.checked);
            updateSelectedIds();
        });
    }

    // üîÉ T·∫£i l·∫°i danh s√°ch ƒë√£ ch·ªçn khi load trang
    const checked = loadChecked();
    checkboxes.forEach(cb => cb.checked = checked.includes(cb.value));
    updateSelectedIds();

    // üî¢ X·ª≠ l√Ω c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
    document.querySelectorAll('.form-update-qty').forEach(form => {
        const id = form.dataset.id;
        const input = form.querySelector('.quantity-input');
        const inc = form.querySelector('.btn-increase');
        const dec = form.querySelector('.btn-decrease');
        const errorBox = form.querySelector('.error-message');
        const unitPrice = parseFloat(form.closest('tr').querySelector('.unit-price').dataset.price);
        const maxQty = parseInt(input.dataset.max);
        const totalCell = form.closest('tr').querySelector('.item-total');

        // üìù G·ª≠i request c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng
        function updateQty(newQty) {
            if (newQty > maxQty) {
                errorBox.textContent = `Ch·ªâ c√≤n ${maxQty} s·∫£n ph·∫©m trong kho.`;
                errorBox.classList.remove('hidden');
                return;
            }
            if (newQty < 1) newQty = 1;

            errorBox.classList.add('hidden');

            fetch(`/cart/update/${id}`, {
                method: 'POST',
                headers: getHeaders(),
                body: JSON.stringify({ quantity: newQty })
            })
            .then(res => res.json())
            .then(data => {
                if (data.success) {
                    input.value = newQty;
                    totalCell.textContent = data.item_total;
                    updateSelectedIds();
                } else {
                    errorBox.textContent = data.message || 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t.';
                    errorBox.classList.remove('hidden');
                }
            });
        }

        // ‚ûï ‚ûñ G√°n s·ª± ki·ªán cho n√∫t tƒÉng/gi·∫£m v√† input
        inc.addEventListener('click', () => updateQty(parseInt(input.value) + 1));
        dec.addEventListener('click', () => updateQty(parseInt(input.value) - 1));
        input.addEventListener('change', () => updateQty(parseInt(input.value) || 1));
    });

    // üßæ X·ª≠ l√Ω form thanh to√°n
    formCheckout?.addEventListener('submit', e => {
        updateSelectedIds();
        if (![...checkboxes].some(cb => cb.checked)) {
            e.preventDefault();
            showError('Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt s·∫£n ph·∫©m ƒë·ªÉ thanh to√°n.');
        }
    });

    // üóëÔ∏è X·ª≠ l√Ω form xo√° s·∫£n ph·∫©m
    formRemove?.addEventListener('submit', e => {
        const selected = [...checkboxes].filter(cb => cb.checked).map(cb => cb.value);
        if (selected.length === 0) {
            e.preventDefault();
            showError('Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt s·∫£n ph·∫©m ƒë·ªÉ x√≥a.');
        }
    });

    // üéüÔ∏è X·ª≠ l√Ω form √°p d·ª•ng m√£ gi·∫£m gi√°
    voucherForm?.addEventListener('submit', e => {
        e.preventDefault();
        const selectedItems = [...checkboxes].filter(cb => cb.checked).map(cb => {
            const row = cb.closest('tr');
            const qty = row?.querySelector('.quantity-input')?.value || 1;
            return { id: cb.value, quantity: parseInt(qty) };
        });
        const code = voucherForm.querySelector('input[name="voucher_code"]')?.value.trim();
        if (!selectedItems.length) return showError('Ph·∫£i ch·ªçn s·∫£n ph·∫©m m·ªõi √°p d·ª•ng m√£.');
        if (!code) return showError('Vui l√≤ng nh·∫≠p m√£ gi·∫£m gi√°.');

        fetch('/cart/apply-voucher', {
            method: 'POST',
            headers: getHeaders(),
            body: JSON.stringify({ voucher_code: code, items: selectedItems })
        })
        .then(res => res.json())
        .then(data => {
            if (data.success) {
                const url = new URL(location.href);
                url.searchParams.set('voucher_applied', '1');
                location.href = url.toString(); // Reload trang ƒë·ªÉ c·∫≠p nh·∫≠t
            } else {
                showError(data.message || '√Åp d·ª•ng m√£ th·∫•t b·∫°i.');
            }
        });
    });
});
