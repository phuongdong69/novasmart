<?php

namespace App\Http\Controllers\User;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\{Auth, DB, Log};
use Illuminate\Support\Str;
use App\Models\{Order, OrderDetail, ProductVariant, Payment, Voucher, Cart, Status};
use Illuminate\Support\Facades\Mail;

class PaymentController extends Controller
{
    // H√†m kh·ªüi t·∫°o thanh to√°n VNPay
    public function vnpayCheckout(Request $request)
    {
        // L·∫•y v√† chu·∫©n h√≥a t·ªïng thanh to√°n
        $amount = (int) str_replace('.', '', $request->input('final_total', 0));

        // Ki·ªÉm tra t·ªïng ti·ªÅn h·ª£p l·ªá
        if ($amount < 5000 || $amount > 100000000) {
            return back()->with('error', 'S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá.');
        }

        // L·∫•y s·∫£n ph·∫©m ƒë√£ ch·ªçn trong gi·ªè
        $selectedItems = $this->getSelectedItems();
        if ($selectedItems->isEmpty()) {
            return back()->with('error', 'Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m h·ª£p l·ªá trong session.');
        }

        // Gom nh√≥m s·∫£n ph·∫©m theo variant
        $groupedItems = $selectedItems->groupBy(fn($item) => $item['variant']->id)
            ->map(function ($items) {
                $first = $items->first();
                return [
                    'product_variant_id' => $first['variant']->id,
                    'quantity'           => $items->sum('quantity'),
                    'price'              => $first['variant']->price,
                ];
            })->values()->all();

        // L∆∞u d·ªØ li·ªáu thanh to√°n v√†o session ƒë·ªÉ x·ª≠ l√Ω sau khi thanh to√°n xong
        $variantIds = collect($groupedItems)->pluck('product_variant_id')->all();
        $totalPrice = collect($groupedItems)->sum(fn($item) => $item['price'] * $item['quantity']);
        session()->put('checkout.selected_items', $groupedItems);
        session()->put('vnpay_order_data', [
            'order_code'  => $request->input('order_code') ?? strtoupper(Str::random(10)),
            'name'        => $request->input('name'),
            'email'       => $request->input('email'),
            'phoneNumber' => $request->input('phoneNumber'),
            'address'     => $request->input('address'),
            'note'        => $request->input('note'),
            'voucher_id'  => $request->input('voucher_id') ?? session('voucher_id'),
            'variant_ids' => $variantIds,
            'cart'        => $groupedItems,
            'total_price' => $totalPrice,
            'final_total' => $amount,
        ]);

        // C·∫•u h√¨nh th√¥ng tin t·ª´ file config/vnpay.php
        $vnp_TmnCode    = config('vnpay.vnp_TmnCode');
        $vnp_HashSecret = config('vnpay.vnp_HashSecret');
        $vnp_Url        = config('vnpay.vnp_Url');
        $vnp_Returnurl  = config('vnpay.vnp_Returnurl');

        // T·∫°o d·ªØ li·ªáu g·ª≠i ƒë·∫øn VNPay
        $inputData = [
            "vnp_Version"    => "2.1.0",
            "vnp_TmnCode"    => $vnp_TmnCode,
            "vnp_Amount"     => $amount * 100, // Nh√¢n 100 theo y√™u c·∫ßu VNPay
            "vnp_Command"    => "pay",
            "vnp_CreateDate" => now()->format('YmdHis'),
            "vnp_CurrCode"   => "VND",
            "vnp_IpAddr"     => $request->ip(),
            "vnp_Locale"     => 'vn',
            "vnp_OrderInfo"  => "Thanh to√°n ƒë∆°n h√†ng",
            "vnp_OrderType"  => "billpayment",
            "vnp_ReturnUrl"  => $vnp_Returnurl,
            "vnp_TxnRef"     => session('vnpay_order_data.order_code'),
        ];

        // S·∫Øp x·∫øp d·ªØ li·ªáu v√† t·∫°o chu·ªói k√Ω
        ksort($inputData);
        $hashData   = http_build_query($inputData);
        $secureHash = hash_hmac('sha512', $hashData, $vnp_HashSecret);

        // T·∫°o URL thanh to√°n v√† chuy·ªÉn h∆∞·ªõng
        $paymentUrl = $vnp_Url . '?' . $hashData . '&vnp_SecureHash=' . $secureHash;
        return redirect($paymentUrl);
    }

    // H√†m x·ª≠ l√Ω khi ng∆∞·ªùi d√πng thanh to√°n xong v√† VNPay g·ªçi l·∫°i
    public function vnpayReturn(Request $request)
    {
        // L·∫•y key b·∫£o m·∫≠t t·ª´ config
        $vnp_HashSecret = config('vnpay.vnp_HashSecret');

        // Lo·∫°i b·ªè hash kh·ªèi request ƒë·ªÉ t√≠nh to√°n l·∫°i
        $inputData = $request->except(['vnp_SecureHash', 'vnp_SecureHashType']);
        ksort($inputData);
        $secureHash = hash_hmac('sha512', http_build_query($inputData), $vnp_HashSecret);

        // X√°c th·ª±c thanh to√°n th√†nh c√¥ng t·ª´ VNPay
        if ($secureHash === $request->input('vnp_SecureHash') && $request->input('vnp_ResponseCode') === '00') {
            DB::beginTransaction();
            try {
                $data = session('vnpay_order_data');
                $orderCode = $request->input('vnp_TxnRef');
                $amount = $request->input('vnp_Amount') / 100;

                // Ki·ªÉm tra l·∫°i d·ªØ li·ªáu t·ª´ session
                if (!$data || ($data['order_code'] ?? '') !== $orderCode) {
                    return redirect()->route('checkout.show')->with('error', 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng trong session.');
                }

                // N·∫øu ƒë∆°n h√†ng ƒë√£ t·ªìn t·∫°i -> kh√¥ng t·∫°o l·∫°i
                $existingOrder = Order::where('order_code', $orderCode)->first();
                if ($existingOrder) {
                    DB::commit();
                    return redirect()->route('checkout.success')->with('success', 'Thanh to√°n th√†nh c√¥ng!');
                }

                // T·∫°o th√¥ng tin thanh to√°n
                $payment = Payment::create([
                    'status_id'        => Status::where('code', 'paid')->first()->id,
                    'payment_method'   => 'vnpay',
                    'amount'           => $amount,
                    'transaction_code' => $request->input('vnp_TransactionNo'),
                    'note'             => $data['note'],
                ]);


                $order = Order::create([
                    'user_id'     => Auth::id(),
                    'voucher_id'  => $data['voucher_id'],
                    'payment_id'  => $payment->id,
                    'status_id'   => Status::where('code', 'pending')->where('type', 'order')->first()->id,
                    'name'        => $data['name'],
                    'email'       => $data['email'],
                    'phoneNumber' => $data['phoneNumber'],
                    'address'     => $data['address'],
                    'note'        => $data['note'],
                    'order_code'  => $orderCode,
                    'total_price' => $amount,

                ]);

                // T·∫°o chi ti·∫øt ƒë∆°n h√†ng v√† gi·∫£m t·ªìn kho
                foreach ($data['cart'] as $item) {
                    OrderDetail::create([
                        'order_id'           => $order->id,
                        'product_variant_id' => $item['product_variant_id'],
                        'quantity'           => $item['quantity'],
                        'price'              => $item['price'],
                    ]);

                    ProductVariant::find($item['product_variant_id'])?->decrement('quantity', $item['quantity']);
                }

                // Tr·ª´ s·ªë l∆∞·ª£ng voucher n·∫øu c√≥
                if ($data['voucher_id']) {
                    Voucher::where('id', $data['voucher_id'])->decrement('quantity');
                }

                // X√≥a c√°c item ƒë√£ mua kh·ªèi cart
                $this->clearPurchasedItemsFromCart($data['variant_ids'] ?? []);

                // So·∫°n email ƒë∆°n h√†ng
                $body = "C·∫£m ∆°n b·∫°n ƒë√£ ƒë·∫∑t h√†ng t·∫°i Nova Smart!\n\n";
                $body .= "üßæ M√£ ƒë∆°n h√†ng: {$order->order_code}\n";
                $body .= "üë§ T√™n kh√°ch h√†ng: {$order->name}\n";
                $body .= "üìß Email: {$order->email}\n";
                $body .= "üìû S·ªë ƒëi·ªán tho·∫°i: {$order->phoneNumber}\n";
                $body .= "üè† ƒê·ªãa ch·ªâ: {$order->address}\n";
                $body .= "üíµ T·ªïng ti·ªÅn: " . number_format($order->total_price, 0, ',', '.') . "‚Ç´\n\n";
                $body .= "üîπ S·∫£n ph·∫©m:\n";

                foreach ($data['cart'] as $item) {
                    $variant = ProductVariant::find($item['product_variant_id']);
                    if ($variant) {
                        $body .= "- {$variant->product->name} ({$variant->name}) √ó {$item['quantity']} = " .
                            number_format($item['quantity'] * $item['price'], 0, ',', '.') . "‚Ç´\n";
                    }
                }

                $body .= "\nCh√∫ng t√¥i s·∫Ω s·ªõm x·ª≠ l√Ω ƒë∆°n h√†ng c·ªßa b·∫°n.\n\n";
                $body .= "Tr√¢n tr·ªçng,\nNova Smart";

                // G·ª≠i mail th√¥ng b√°o ƒë·∫∑t h√†ng
                Mail::raw($body, function ($message) use ($order) {
                    $message->to($order->email, $order->name)
                        ->subject('Th√¥ng b√°o ƒë·∫∑t h√†ng th√†nh c√¥ng - Nova Smart');
                });

                // X√≥a session li√™n quan ƒë·∫øn checkout
                session()->forget([
                    'voucher',
                    'vnpay_order_data',
                    'checkout.selected_items',
                    'checkout.selected_ids',
                ]);

                DB::commit();
                return redirect()->route('checkout.success')->with('success', 'Thanh to√°n VNPay th√†nh c√¥ng! ƒê√£ g·ª≠i email x√°c nh·∫≠n.');
            } catch (\Throwable $e) {
                DB::rollBack();
                return redirect()->route('checkout.show')->with('error', 'L·ªói x·ª≠ l√Ω ƒë∆°n h√†ng: ' . $e->getMessage());
            }
        }

        return redirect()->route('checkout.show')->with('error', 'Thanh to√°n th·∫•t b·∫°i ho·∫∑c b·ªã h·ªßy.');
    }

    // L·∫•y danh s√°ch item ƒë√£ ch·ªçn t·ª´ session
    private function getSelectedItems()
    {
        $variantIds = session('checkout.selected_ids', []);
        if (empty($variantIds)) return collect();

        if (Auth::check()) {
            $items = Auth::user()->cart->items()
                ->whereIn('product_variant_id', $variantIds)
                ->with('productVariant.product')
                ->get();

            return $items->map(function ($item) {
                $variant = $item->productVariant;
                return [
                    'variant'  => $variant,
                    'quantity' => min($item->quantity, $variant->quantity),
                ];
            })->filter()->values();
        }

        $cart = session('cart', []);
        return collect($cart)->filter(function ($item) use ($variantIds) {
            $variantId = $item['product_variant_id'] ?? ($item['variant']['id'] ?? null);
            return in_array((int)$variantId, $variantIds);
        })->map(function ($item) {
            $variantId = $item['product_variant_id'] ?? ($item['variant']['id'] ?? null);
            $variant = ProductVariant::with('product')->find($variantId);
            if (!$variant) return null;
            return [
                'variant'  => $variant,
                'quantity' => min($item['quantity'] ?? 1, $variant->quantity),
            ];
        })->filter()->values();
    }

    // Xo√° c√°c item ƒë√£ mua ra kh·ªèi cart (session ho·∫∑c database)
    private function clearPurchasedItemsFromCart(array $variantIdsToRemove): void
    {
        if (Auth::check()) {
            $cart = Cart::where('user_id', Auth::id())->first();
            $cart?->items()->whereIn('product_variant_id', $variantIdsToRemove)->delete();
            Log::debug('üßπ Xo√° DB cart:', $variantIdsToRemove);
        } else {
            $cart = session('cart', []);
            $updated = [];

            foreach ($cart as $item) {
                $variantId = $item['product_variant_id'] ?? ($item['variant']['id'] ?? null);
                if (!in_array((int)$variantId, $variantIdsToRemove)) {
                    $updated[$variantId] = $item;
                }
            }

            session()->put('cart', $updated);
        }
    }
}
