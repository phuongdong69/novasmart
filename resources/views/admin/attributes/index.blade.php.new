@extends('admin.layouts.app')
@section('title')
Trang Thuộc Tính
@endsection
@section('content')
<div class="w-full px-6 py-6 mx-auto">
    <div class="flex flex-wrap -mx-3">
        <div class="flex-none w-full max-w-full px-3">
            <div class="relative flex flex-col min-w-0 mb-6 break-words bg-white border-0 border-transparent shadow-xl dark:bg-slate-850 dark:shadow-dark-xl rounded-2xl bg-clip-border">
                {{-- Tiêu đề + Nút thêm mới --}}
                <div class="p-6 pb-0 mb-0 border-b-0 rounded-t-2xl border-b-transparent flex justify-between items-center">
                    <h3 class="dark:text-white text-lg font-semibold">Danh sách thuộc tính</h3>
                    <a href="{{ route('admin.attributes.create') }}"
                        class="bg-blue-500 hover:bg-blue-700 text-white text-sm font-bold py-2 px-4 rounded">
                        + Thêm mới
                    </a>
                </div>

                {{-- Thanh tìm kiếm --}}
                <div class="px-6 mt-4">
                    <form method="GET" action="{{ route('admin.attributes.index') }}" class="flex justify-end items-center gap-2">
                        <input
                            type="search"
                            name="keyword"
                            class="border border-slate-300 rounded px-3 py-2 text-sm focus:outline-none focus:ring focus:border-blue-300"
                            placeholder="Tìm theo ID hoặc tên..."
                            value="{{ request('keyword') }}"
                        >
                        <button type="submit" class="text-sm px-3 py-2 bg-blue-500 text-white rounded hover:bg-blue-600">
                            Tìm
                        </button>
                    </form>
                </div>

                {{-- Bảng thuộc tính --}}
                <div class="flex-auto px-0 pt-4 pb-2">
                    <div class="p-0 overflow-x-auto">
                        <table class="items-center w-full mb-0 align-top border-collapse dark:border-white/40 text-slate-500">
                            <thead class="bg-gray-50">
                                <tr>
                                    <th class="px-6 py-3 text-left uppercase text-xs font-bold text-slate-400">#</th>
                                    <th class="px-6 py-3 text-left uppercase text-xs font-bold text-slate-400">Tên</th>
                                    <th class="px-6 py-3 text-left uppercase text-xs font-bold text-slate-400">Mô tả</th>
                                    <th class="px-6 py-3 text-left uppercase text-xs font-bold text-slate-400">Thao tác</th>
                                </tr>
                            </thead>
                            <tbody>
                                @forelse ($attributes as $attribute)
                                    <tr class="border-b dark:border-white/40 hover:bg-gray-50 transition">
                                        <td class="px-6 py-3 text-sm">{{ $loop->index + 1 }}</td>
                                        <td class="px-6 py-3 text-sm">
                                            <a href="#" class="attribute-name text-blue-600 hover:underline" data-attribute-id="{{ $attribute->id }}">{{ $attribute->name }}</a>
                                        </td>
                                        <td class="px-6 py-3 text-sm">{{ $attribute->description }}</td>
                                        <td class="px-6 py-3 text-sm">
                                            <a href="{{ route('admin.attributes.edit', $attribute->id) }}" class="text-blue-600 hover:underline mr-2">Sửa</a>
                                            <form action="{{ route('admin.attributes.destroy', $attribute->id) }}" method="post" style="display:inline-block;">
                                                @csrf
                                                @method('DELETE')
                                                <button type="submit" onclick="return confirm('Bạn có chắc chắn muốn xóa không?')" class="text-red-500 hover:underline">Xóa</button>
                                            </form>
                                        </td>
                                    </tr>
                                @empty
                                    <tr>
                                        <td colspan="4" class="text-center py-4 text-gray-500">Không có thuộc tính nào</td>
                                    </tr>
                                @endforelse
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Popover for Attribute Values -->
<div id="attributeValuesPopover" class="hidden absolute bg-white rounded-lg shadow-lg border border-gray-200 p-4" style="min-width:220px; max-width:320px; z-index:50;">
    <button id="closeAttributePopover" class="absolute top-1 right-2 text-gray-400 hover:text-gray-600 text-xl">&times;</button>
    <h4 class="text-base font-semibold mb-3">Giá trị thuộc tính</h4>
    <div id="attributeValuesContent"></div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function () {
    const popover = document.getElementById('attributeValuesPopover');
    const content = document.getElementById('attributeValuesContent');
    const closeBtn = document.getElementById('closeAttributePopover');

    // Đảm bảo popover luôn là con của body để định vị tuyệt đối chính xác
    if (popover.parentNode !== document.body) {
        document.body.appendChild(popover);
    }

    let lastTarget = null;

    document.querySelectorAll('.attribute-name').forEach(function (el) {
        el.addEventListener('click', function (e) {
            e.preventDefault();
            const attributeId = this.getAttribute('data-attribute-id');
            lastTarget = this;
            content.innerHTML = '<div class="text-gray-400">Đang tải...</div>';
            popover.classList.remove('hidden');

            // Popover xuất hiện ngang với tên thuộc tính
            const rect = this.getBoundingClientRect();
            popover.style.top = `${rect.top + window.scrollY}px`;
            popover.style.left = `${rect.left}px`;

            fetch(`/admin/attributes/${attributeId}/values`)
                .then(response => response.json())
                .then(data => {
                    if (data.values && data.values.length > 0) {
                        content.innerHTML = data.values.map(v => `
                            <div class='flex items-center justify-between mb-2' data-value-id='${v.id}' data-attribute-id='${v.attribute_id}'>
                                <span class='block bg-gray-100 rounded px-2 py-1 value-text'>${v.value}</span>
                                <input type='text' class='hidden value-input border rounded px-2 py-1 text-sm' value='${v.value}' style='min-width:80px;'>
                                <button class='ml-2 bg-blue-500 hover:bg-blue-600 text-white text-xs font-semibold px-3 py-1 rounded shadow transition edit-btn'>Sửa</button>
                                <button class='ml-2 bg-green-500 hover:bg-green-600 text-white text-xs font-semibold px-3 py-1 rounded shadow transition save-btn hidden'>Lưu</button>
                            </div>
                        `).join('');

                        // Bắt sự kiện sửa
                        document.querySelectorAll('#attributeValuesContent .edit-btn').forEach(function (btn) {
                            btn.addEventListener('click', function () {
                                const row = this.closest('div[data-value-id]');
                                row.querySelector('.value-text').classList.add('hidden');
                                const input = row.querySelector('.value-input');
                                input.classList.remove('hidden');
                                this.classList.add('hidden');
                                row.querySelector('.save-btn').classList.remove('hidden');
                                input.focus();
                            });
                        });

                        // Bắt sự kiện lưu
                        document.querySelectorAll('#attributeValuesContent .save-btn').forEach(function (btn) {
                            btn.addEventListener('click', function () {
                                const row = this.closest('div[data-value-id]');
                                const valueId = row.getAttribute('data-value-id');
                                const input = row.querySelector('.value-input');
                                const newValue = input.value.trim();
                                if (!newValue) { input.focus(); return; }

                                btn.disabled = true;
                                btn.innerText = 'Đang lưu...';

                                const formData = new FormData();
                                formData.append('_method', 'PUT');
                                formData.append('value', newValue);
                                formData.append('attribute_id', row.getAttribute('data-attribute-id'));

                                fetch(`/admin/attribute_values/${valueId}`, {
                                    method: 'POST',
                                    headers: {
                                        'X-CSRF-TOKEN': document.querySelector('meta[name=csrf-token]').content
                                    },
                                    body: formData
                                })
                                .then(async r => {
                                    let data;
                                    try { data = await r.json(); } catch (e) { data = {}; }

                                    if (r.ok && data.success) {
                                        row.querySelector('.value-text').textContent = newValue;
                                        row.querySelector('.value-text').classList.remove('hidden');
                                        input.classList.add('hidden');
                                        btn.classList.add('hidden');
                                        row.querySelector('.edit-btn').classList.remove('hidden');
                                    } else {
                                        alert(data?.message ?? 'Lỗi khi lưu!');
                                    }
                                })
                                .catch(() => {
                                    alert('Lỗi khi lưu!');
                                })
                                .finally(() => {
                                    btn.disabled = false;
                                    btn.innerText = 'Lưu';
                                });
                            });

                            // Thêm sự kiện nhấn Enter để lưu
                            const input = btn.closest('div[data-value-id]').querySelector('.value-input');
                            input.addEventListener('keydown', function(e) {
                                if (e.key === 'Enter') {
                                    btn.click();
                                }
                            });
                        });
                    } else {
                        content.innerHTML = '<span class="text-gray-400">(Không có giá trị)</span>';
                    }
                })
                .catch(() => {
                    content.innerHTML = '<span class="text-red-500">Lỗi khi tải giá trị!</span>';
                });
        });
    });

    // Đóng popup khi click ra ngoài
    closeBtn.addEventListener('click', function () {
        popover.classList.add('hidden');
    });

    document.addEventListener('mousedown', function (e) {
        if (!popover.contains(e.target) && (!lastTarget || e.target !== lastTarget)) {
            popover.classList.add('hidden');
        }
    });
});
</script>
@endsection
